{"version":3,"sources":["ng://angular-bem/bem.ts"],"names":["BemConfig","separators","el","mod","val","ignoreValues","modCase","generateClass","blockName","elemName","modName","modValue","cls","str","replace","s","toLowerCase","modNameHandler","parseMods","mods","split","Array","isArray","arr","forEach","key","setMods","oldMods","element","renderer","Object","keys","removeClass","nativeElement","addClass","BlockDirective","name","this","prototype","ngOnChanges","JSON","stringify","_modSerialized","_a","_mods","assign","Directive","args","selector","ElementRef","Renderer2","Attribute","Input","ElemDirective","block","BemModule","config","data","indexOf","NgModule","declarations","ModDirective","exports"],"mappings":"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","sourcesContent":["import { NgModule, Directive, Attribute, Renderer2, Input, ElementRef } from '@angular/core';\n\nexport class BemConfig {\n  separators?: Array<string>;\n  ignoreValues?: boolean;\n  modCase?: string;\n}\n\nconst separators = {\n  el: '__',\n  mod: '--',\n  val: '-'\n};\nlet ignoreValues = false;\nlet modCase = 'kebab';\n\nfunction modNameHandler(str: string): string {\n  switch (modCase) {\n    case 'kebab':\n      return str ? str.replace(/[A-Z]/g, function(s) {return '-' + s.toLowerCase(); }).replace(/$\\-/, '') : '';\n    case 'snake':\n      return str ? str.replace(/[A-Z]/g, function(s) {return '_' + s.toLowerCase(); }).replace(/$\\-/, '') : '';\n    default:\n      return str;\n  }\n}\n\nfunction generateClass(blockName: string, elemName?: string, modName?: string, modValue?: boolean | string) {\n  if (ignoreValues) {\n    modValue = !!modValue;\n  }\n\n  if (typeof modValue !== 'string' && typeof modValue !== 'boolean') {\n    modValue = !!modValue;\n  }\n\n  let cls = blockName;\n\n  if (elemName) {\n    cls += separators.el + elemName;\n  }\n\n  if (modName) {\n    modName = modNameHandler(modName);\n    cls += separators.mod + modName;\n    if (typeof(modValue) !== 'boolean' && modValue != null) {\n      cls += separators.val + modValue;\n    }\n  }\n\n  return cls;\n}\n\nfunction parseMods(mods: string | string[] | object) {\n  if (typeof mods === 'string') {\n    mods = mods.split(/\\s+/);\n  }\n\n  if (Array.isArray(mods)) {\n    let arr = mods;\n\n    mods = {};\n\n    arr.forEach(key => {\n      mods[key] = true;\n    });\n  } else if (typeof mods !== 'object') {\n    return {};\n  }\n\n  return mods;\n}\n\nfunction setMods(blockName: string, elemName: string, mods: object, oldMods: object, element: ElementRef, renderer: Renderer2) {\n  Object.keys(mods).forEach(key => {\n    if (oldMods[key]) {\n      if (mods[key] === oldMods[key]) {\n        return;\n      }\n\n      renderer.removeClass(element.nativeElement, generateClass(blockName, elemName, key, oldMods[key]));\n    }\n\n    if (mods[key]) {\n      renderer.addClass(element.nativeElement, generateClass(blockName, elemName, key, mods[key]));\n    }\n  });\n\n  Object.keys(oldMods).forEach(key => {\n    if (!(key in mods) && oldMods[key]) {\n      renderer.removeClass(element.nativeElement, generateClass(blockName, elemName, key, oldMods[key]));\n    }\n  });\n}\n\n@Directive({\n  selector: '[block]',\n})\nexport class BlockDirective {\n  public element: ElementRef;\n  public renderer: Renderer2;\n  public name: string;\n  @Input() public mod: string | string[] | object;\n  private _mods: Object;\n  private _modSerialized: string;\n\n  constructor(element: ElementRef,\n              renderer: Renderer2,\n              @Attribute('block') name: string) {\n\n    this.name = name;\n    this.element = element;\n    this.renderer = renderer;\n\n    renderer.addClass(element.nativeElement, generateClass(name));\n  }\n\n  ngOnChanges() {\n    if (JSON.stringify(this.mod) !== this._modSerialized) {\n      this._modSerialized = JSON.stringify(this.mod);\n\n      let mods = this.mod;\n\n      let {renderer, element, name} = this;\n\n      mods = parseMods(mods);\n\n      setMods(name, '', mods, this._mods || {}, element, renderer);\n\n      this._mods = this._mods === mods ? Object.assign({}, mods) : mods;\n    }\n  }\n}\n\n@Directive({\n  selector: '[elem]',\n})\nexport class ElemDirective {\n  public element: ElementRef;\n  public renderer: Renderer2;\n  public blockName: string;\n  public name: string;\n  @Input() public mod: string | string[] | object;\n  private _mods: Object;\n  private _modSerialized: string;\n\n  constructor(element: ElementRef,\n              renderer: Renderer2,\n              @Attribute('elem') name: string,\n              block: BlockDirective) {\n\n    this.blockName = block.name;\n    this.name = name;\n    this.element = element;\n    this.renderer = renderer;\n\n    renderer.addClass(element.nativeElement, generateClass(block.name, name));\n  }\n\n  ngOnChanges() {\n    if (JSON.stringify(this.mod) !== this._modSerialized) {\n      this._modSerialized = JSON.stringify(this.mod);\n\n      let mods = this.mod;\n\n      let {renderer, element, blockName, name} = this;\n\n      mods = parseMods(mods);\n\n      setMods(blockName, name, mods, this._mods || {}, element, renderer);\n\n      this._mods = this._mods === mods ? Object.assign({}, mods) : mods;\n    }\n  }\n}\n\n@Directive({\n  selector: '[mod]',\n})\nexport class ModDirective {}\n\n@NgModule({\n  declarations: [\n    BlockDirective,\n    ElemDirective,\n    ModDirective,\n  ],\n  exports: [\n    BlockDirective,\n    ElemDirective,\n    ModDirective,\n  ]\n})\nexport class BemModule {\n  static config(data: BemConfig) {\n    if (!data) {\n      return BemModule;\n    }\n\n    if (data.separators) {\n      separators.el = data.separators[0] || '__';\n      separators.mod = data.separators[1] || '--';\n      separators.val = data.separators[2] || '-';\n    }\n\n    if ('ignoreValues' in data) {\n      ignoreValues = !!data.ignoreValues;\n    }\n\n    if (data.modCase) {\n      if (!~['kebab', 'camel', 'snake'].indexOf(data.modCase)) {\n        throw 'Wrong mod case. You can use only these cases: kebab, snake, camel';\n      }\n\n      modCase = data.modCase;\n    }\n\n    return BemModule;\n  }\n}\n"]}